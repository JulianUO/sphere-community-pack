//****************************************************************************
// SphereServer ©1997-2009
// This script is part from the Sphere Community Script Pack.
// You can download the full pack from: www.sphereserver.net
//****************************************************************************
// FILE LAST UPDATED: 
VERSION=0.56b
//
// SCRIPT CREDITS
// --------------
// ShiryuX - All the script
//
// SCRIPT DOCUMENTATION
// --------------------
// Typedef for Item Properties. 
// Based on EA.
//
// FORMULAS USED
// -------------
// Mana Regeneration:
// - Total = MRe + MRf + MRmi
// -- MRmi = 2+(Meditation * 3 + Intelligence)/40
// --- If GM Medit, MRmi = 2+(1.1*(Meditation * 3 + Intelligence)/40
// --- If GM Medit and Medit is Active, MRmi=2+(2*(1.1*(Meditation * 3 + Intelligence)/40))
// --- If Medit is Active, MRmi=2+(2*(Meditation * 3 + Intelligence)/40)
// -- MRf = Focus/20
// -- MRe = tag0.ManaRegeneration
// Hit Points Regeneration:
// - Total = 0.1 * tag0.HitPointRegeneration
//
// PROPERTIES LIST
// ---------------
// scp.ItemProp_Resistances
// *DONE* scp.ItemProp_DamageIncrease
// *DONE* scp.ItemProp_DefenseChanceIncrease
// *DONE* scp.ItemProp_DexterityBonus
// scp.ItemProp_EnhancePotion			// ATTACH TO CRAFTING SYS
// *DONE* scp.ItemProp_FasterCastRecovery
// *DONE* scp.ItemProp_FasterCasting
// *DONE* scp.ItemProp_HitChanceIncrease
// *DONE* scp.ItemProp_HitDispel
// *DONE* scp.ItemProp_HitLifeLeech
// *DONE* scp.ItemProp_HitLowerAttack
// *DONE* scp.ItemProp_HitLowerDefense
// *DONE* scp.ItemProp_HitManaLeech
// *DONE* scp.ItemProp_HitPointRegeneracion
// *DONE* scp.ItemProp_HitStaminaLeech
// *DONE* scp.ItemProp_HitPointIncrease
// *DONE* scp.ItemProp_IntelligenceBonus
// *DONE* scp.ItemProp_LowerManaCost
// *DONE* scp.ItemProp_LowerReagentCost
// *DONE* scp.ItemProp_Luck
// *DONE* scp.ItemProp_MageArmor
// *DONE* scp.ItemProp_MageWeapon
// *DONE* scp.ItemProp_ManaIncrease
// *DONE* scp.ItemProp_ManaRegeneration
// *DONE* scp.ItemProp_ReflectPhysicalDamage
// *DONE* scp.ItemProp_SelfRepair
// *DONE* scp.ItemProp_Slayer
// *DONE* scp.ItemProp_SkillBonus
// scp.ItemProp_SpellChanneling
// *DONE* scp.ItemProp_SpellDamageIncrease
// *DONE* scp.ItemProp_StaminaIncrease
// scp.ItemProp_StaminaRegeneration
// *DONE* scp.ItemProp_StrengthBonus
// *DONE* scp.ItemProp_SwingSpeedIncrease
// *DONE* scp.ItemProp_BestWeaponSkill


[events e_NpcPropertiesEvent]
on=@deathcorpse
local.corpse = <argo.uid>
if <def.scp.ItemProp_Luck> == 0
return 0
endif
ref8 = <attacker.max>
if <ref8.memoryfindtype.memory_ipet>
ref8 = <ref8.memoryfindtype.memory_ipet.link.uid>
endif
if <tag0.luck.loot>
local.chanceinc = <feval <floatval <ref8.luck> @ (5 / 9)>>
args = <tag0.luck.loot>
local.items = <r<argv[0]>>
	if <r100> < <local.chanceinc>
	local.items ++
	endif
	if <argv[1]>
	local.props = <r<argv[1]>>
		if <r100> < <local.chanceinc>
		local.props ++
		endif
	else
	local.props = 1
	endif
	for 1 <local.items>
		if <r2>
		serv.newitem random_weapon
		else
		serv.newitem {random_armor 1 {i_bracelet_gold 1 i_ring_gold 1} 1}
		endif
	local.type = <new.f_GetBaseType>
	new.events +t_iprop
		for x 1 <local.props>
		local.proptemp = <f_GetRandomProperty <local.type>>
			while <new.f_IsProperty <local.proptemp>>
			local.proptemp = <f_GetRandomProperty <local.type>>
			endwhile
		local.intensity = <eval <r<getargv 2 <def.itemprop_<local.proptemp>>>>>
		args = <def.itemprop_<local.proptemp>>
			doswitch <argv[4]>
			local.blank
			new.tag0.<argv[5]> = <local.intensity>
			new.<argv[5]> <local.intensity>
			enddo
		endfor
	new.cont = <local.corpse>
	endfor
endif


[events e_PlayerPropertiesEvent]
on=@userstats
// Hit Point Increase, just add the TAG or Cap (whichever is smaller) to the maxhits
// Safe zone since EVENTS on EventsPlayer are called last.
// Same goes for ManaIncrease, StaminaIncrease
if <def.scp.ItemProp_HitPointIncrease> == 1
maxhits += <min <tag0.HitPointIncrease>,<getargv 3 <def.itemprop_010>>>
endif
if <def.scp.ItemProp_ManaIncrease> == 1
maxmana += <min <tag0.ManaIncrease>,<getargv 3 <def.itemprop_017>>>
endif
if <def.scp.ItemProp_StaminaIncrease> == 1
maxstam += <min <tag0.StaminaIncrease>,<getargv 3 <def.itemprop_01f>>>
endif
// Hit Point Generation increases value in the regeneration
// Formula: (0.1 * intensity)
if <def.scp.ItemProp_HitPointRegeneration> == 1
tag0.override.regenval_0 = <eval 0.1 * <tag0.HitPointRegeneration>>
endif
// Mana Regeneration is more complicated, since we have to look at:
// Passive/Active Meditation, Intelligence, Battle Focus, Equipment
// If you wonder why Medit / 10 and Focus / 200. Because in Sphere, GM Medit = 1000 and not 100.0
if <def.scp.NewSkills_Meditation> == 1
	if <def.scp.Meditation_PassiveRegen> == 1
		if <meditation> > 99.9 // GM Meditation or better gets 10% bonus.
		local.MRmi = <feval <floatval (1.1 * ((<meditation> * 3) + <int>)) / 40)>>
		else
		local.MRmi = <feval <floatval ((<meditation> * 3) + <int>) / 40>>
		endif
		if <tag0.active.medit>
		local.MRmi *= 2 // Active Meditation gets regen * 2
		endif
	endif
else
local.MRmi = 0
endif
if <def.scp.NewSkills_Focus> == 1
local.MRf = <eval <focus> / 200>
else
local.MRf = 0
endif
if <def.scp.ItemProp_ManaRegeneration> == 1
local.MRe = <tag0.ManaRegeneration>
	if <local.MRe> > <getargv 3 <def.itemprop_018>>
	local.MRe = <getargv 3 <def.itemprop_018>>
	endif
else
endif
local.MRt = <eval 2 + <local.MRmi> + <local.MRf> + <local.MRe>> // This is the amount of points in 10 seconds
tag0.override.regenval_1 = <local.MRt> // We get the 10 second value this way =)

on=@spellselect
// A small check for Faster Cast Recovery. No need for checking if it is activated.
// Since if the property is not active, the tag will not be set.
if <dtag0.spellrecovery> > <serv.time>
src.sysmessage @03c1,6,2 502644 // You have not yet recovered from casting a spell
return 1
endif
if <def.scp.ItemProp_LowerManaCost> == 1
argn2 = <eval (<argn2> * (<tag0.LowerManaCost> + 1)) / 100>
endif
if <def.scp.ItemProp_LowerReagentCost> == 1
	if <argn3> == 2
		if <argn1> < 200
		f_LowerReagentCost_Reagents <argn1>	
		elif <argn1> > 600
		return 2
		else
		f_LowerReagentCost_Tithing <argn1>
		endif
	return 6
	endif
endif

on=@spellcast
// MageWeapon in this case something like MageWeaponAndShield
// Since layer 2 can be used as Two Handed Weapon or Shield
if <def.scp.ItemProp_MageWeapon> == 1
	if <argn1> != 104 // exception for Curse Weapon
		if <findlayer.1.uid>
			if !(<findlayer.1.tag0.MageWeapon>) || (<findlayer.1.type> == t_wand)
			findlayer.1.unequip
			endif
		elif <findlayer.2.uid>
			if (!<findlayer.2.tag0.MageWeapon>) || (!<findlayer.2.tag0.MageArmor>)
			findlayer.2.unequip
			endif
		endif
	endif
endif
// Now, this is the real MageArmor property. Which apply for every armor slot
// Except shield, explained it before.
if <def.scp.ItemProp_MageArmor> == 1
	for 1 <def.armor_amount>
		if <findlayer.<def.armor_part.<dlocal._for>>>
		ref5 = <findlayer.<def.armor_part_<dlocal._for>>.uid>
			if <ref5.type> == t_armor
				if <ref5.tag0.MageWeapon> == 0
				src.sysmessage You can't cast with this armor (<ref5.name>).
				return 1
				endif
			endif
		endif
	endfor
endif
// A weird property actually. For Mages and Necromancers > 70.0 this is capped at 2.
// But for Chivalry, Ninjitsu, Bushido and Spellweaving this is capped at 4.
// So just do (cap * 2) in the last case.
if <def.scp.ItemProp_FasterCasting> == 1
local.fcast = <src.tag0.FasterCasting>
	if <tag0.FasterCasting> > <getargv 3 <def.itemprop_07>>
		if <src.magery> < 70.0
		local.fcast = <min <tag0.FasterCasting>,4>
		else
		local.fcast = <getargv 3 <def.itemprop_07>>
		endif	
	endif
argn3 -= <local.fcast>
	if <argn3> < 0
	argn3 = 0.1
	endif
endif

on=@spelleffect
if <def.scp.ItemProp_FasterCastRecovery> == 1
src.tag0.spellrecovery = <eval <serv.time>+(12-(<min <eval <src.tag0.FasterCastRecovery>*2>,12>))>
endif

on=@hit
// Hit Dispel helps you to dispel a target when you hit it.
// The % of this being activated is the intensity on the player (0-100).
if <def.scp.ItemProp_HitDispel> == 1
	if <src.brain>
		if <src.flags>&statf_conjured
			if <r100> < <tag0.HitDispel>
			src.hits = 0
			endif
		endif
	endif
endif
// Slayer groups are just like flags, only need to see if the weapon exist
// check if the weapon got a slayer tag and if the target got a slayer tag.
// Lesser Slayers do x3 damage while Super Slayers do x2.
if <def.scp.ItemProp_Slayer> == 1
	if !<isempty <argo.uid>>
		if <src.tag0.slayer.less>
			if <argo.tag0.slayer.less> == <src.tag0.slayer>
			argn1 *= 3
			endif
		elif <src.tag0.slayer.super>
			if <argo.tag0.slayer.super>&<src.tag0.slayer>
			argn1 *= 2
			endif
		endif
	endif
endif		
if <def.scp.ItemProp_DamageIncrease> == 1
	if <tag0.DamageIncrease>
	local.tempbonus = <tag0.DamageIncrease>
	local.dicap = <getargv 3 <def.itemprop_01>>
		if <tag0.DamageIncrease> > <local.dicap>
		local.tempbonus = <local.dicap>
		endif
	argn1 += <eval ((<local.tempbonus> * <argn1>) / 100) + 1>
	endif
endif
// Hit Lower Attack and Hit Lower Defense applies directly to the target HCI/HDI
// It lasts for 8 seconds and only a 25 percent, though the intensity is used for calculations.
if <def.scp.ItemProp_HitLowerAttack> == 1
	if <r100> < <tag0.HitLowerAttack>
		if <src.restest i_hit_lower_attack>
		src.findid.i_hit_lower_attack.timer = 8
		else
		serv.newitem i_hit_lower_attack
		src.equip <new.uid>
		endif
	endif
endif
if <def.scp.ItemProp_HitLowerDefense> == 1
	if <r100> < <tag0.HitLowerDefense>
		if <src.restest i_hit_lower_defense>
		src.findid.i_hit_lower_defense.timer = 8
		else
		serv.newitem i_hit_lower_defense
		src.equip <new.uid>
		endif
	endif
endif

on=@gethit
// This three leech properties should be at the end of the trigger
// AFTER the damage calcs are done. Since they work according to damage dealt.
// Formula (for both) is: (damage * 0.4) - intensity
if <def.scp.ItemProp_HitManaLeech> == 1 
float.mtoleech = <floatval (<argn1> * 0.4) - <tag0.HitManaLeech>>
mana += <feval <float.mtoleech>>
	if <mana> > <maxmana>
	mana = <maxmana>
	endif
src.mana -= <feval <float.mtoleech>>
endif
if <def.scp.ItemProp_HitLifeLeech> == 1
float.htoleech = <floatval (<argn1> * 0.4) - <tag0.HitLifeLeech>>
hits += <feval <float.htoleech>>
	if <hits> > <maxhits>
	hits = <maxhits>
	endif
src.hits -= <feval <float.htoleech>>
endif
// This one works a little different to the rest of the leech properties
// It uses the % of the player to calc success and gains the damage amount in stamina
// Still, it doesn't "leech" stamina from the target
if <def.scp.ItemProp_HitStaminaLeech> == 1
	if <r100> < <tag0.HitStaminaLeech>
	stam += <argn1>
	endif
endif



[Itemdef i_hit_lower_attack]
ID=i_memory
TYPE=t_eq_script
Name=Hit Lower Attack

on=@equip
timer = 8
src.tag.HitChanceIncrease -= 25

on=@unequip
src.tag.HitChanceIncrease += 25

on=@timer
remove
return 1

[Itemdef i_hit_lower_defense]
ID=i_memory
TYPE=t_eq_script
Name=Hit Lower Defense

on=@equip
timer = 8
src.tag.DefenseChanceIncrease -= 25

on=@unequip
src.tag.DefenseChanceIncrease += 25

on=@timer
remove
return 1

[eof]