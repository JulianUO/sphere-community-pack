
[Function DamFire]
Local.Calc = <Eval <Args>>
If <IsEmpty <Args>>
Return <Eval <Tag0.Firedamage>>
Else
Try Tag0.Firedamage = <Eval <Local.Calc>>
Endif

[Function DamCold]
Local.Calc = <Eval <Args>>
If <IsEmpty <Args>>
Return <Eval <Tag0.Colddamage>>
Else
Try Tag0.Colddamage = <Eval <Local.Calc>>
Endif

[Function DamPoison]
Local.Calc = <Eval <Args>>
If <IsEmpty <Args>>
Return <Eval <Tag0.Poisondamage>>
Else
Try Tag0.Poisondamage = <Eval <Local.Calc>>
Endif

[Function DamEnergy]
Local.Calc = <Eval <Args>>
If <IsEmpty <Args>>
Return <Eval <Tag0.Energydamage>>
Else
Try Tag0.Energydamage = <Eval <Local.Calc>>
Endif

[Function Shield]
Return <Qval <Findlayer.2.Type>==t_shield ? <Findlayer.2.Uid> : 0>

[Function GetDam]
IF <MOREY>
	Local.MagicDam = <eval (<morey>/66))>
	Return <Eval <Dam.Low>+<Modar>+<Local.MagicDam>>,<Eval <Dam.High>+<Modar>+<Local.MagicDam>>
ELSE
Return <Eval <Dam.Low>+<Modar>>,<Eval <Dam.High>+<Modar>>
ENDIF

[FUNCTION IsArcheryWeapon]
IF ((<TYPE> == t_weapon_bow) || (<TYPE> == t_weapon_xbow))
 RETURN 1
ENDIF
RETURN 0

[Function IsAttackable]
Ref1=<Argv[0]>
If ((<NPC>) && (!<Owner>))
Say Attack! (Evil)
Return 1
Endif
If <Ref1.IsAttacking <Uid>>
Say Attack! (Attacked)
Return 1
Endif
If <Ref1.IsInvul>
Say Cant (Invul)
Return 0
Endif
If <Def0.Combat_Map_<Ref1.Map>_PvP>
Say Attack! (PvP Map)
Return 1
Endif
If <IsEnemyGuild <Ref1.Uid>> 
Say Attack! (Enemy Guild)
Return 1
Endif
If ((<GetGuild>) && (<GetGuild>==<Ref1.GetGuild>))
Say Attack! (Same Guild)
Return 1
Endif
If ((<Ref1.NPC>) && (!<Ref1.Owner>))
Say Attack! (Ownerless NPC)
Return 1
Endif
Return 0

[Function GetGuild]
If <NPC>
Return <Qval <Owner> ? <Owner.Guild> : 0>
Endif
Return <Guild>

[Function IsAttacking]
Local.Attacked=<Argv[0]>
FORCHARMEMORYTYPE memory_fight
If <Link.Uid>==<Local.Attacked>
Return 1
Endif
ENDFOR
Return 0

[Function IsHostile]
Ref1=<Argv[0]>
If ((<NPC>) && (!<Owner>))
If ((<Ref1.NPC>) && (!<Ref1.Owner>))
Say Not (Another Monster)
Return 0
Endif
Say Hostile! (Not a Monster)
Return 1
Endif
If <Ref1.IsInvul>
Say Not (Invul)
Return 0
Endif
If ((<IsAttacking <Ref1.Uid>>) || (<Ref1.IsAttacking <Uid>>))
Say Hostile! (Attacking/Attacked)
Return 1
Endif
If ((<GetGuild>) && (<GetGuild>==<Ref1.GetGuild>))
Say Not (Same Guild)
Return 0
Endif
If <IsEnemyGuild <Ref1.Uid>> 
Say Hostile! (In Enemy Guild)
Return 1
Endif
If <Def0.Combat_Map_<Ref1.Map>_PvP>
If (<Ref1.NOTOGETFLAG> > 2)
Say Hostile! (Animal and Up)
Return 1
Endif
Say Not (Innocent / Guilded)
Return 0
Else
If <IsAttackable <Ref1.Uid>>
Say Hostile! (Attackable)
Return 1
Endif
Say Not (Not Attackable)
Return 0
Endif
Return 0

[Function IsEnemyGuild]
Ref1=<Argv[0]>
Return <f_guildsys_isatwarwith <GetGuild>,<Ref1.GetGuild>>

[Function IsInvul]
If <Flags>&01
Return 1
Endif
Return 0

[Function GetArmor]
Return <dDef0.Armor_ID_<Serv.Itemdef.<ID>.Baseid>>

[Function GetArmorName]
Return <Def0.Armor_Type_<dDef0.Armor_ID_<Serv.Itemdef.<ID>.Baseid>>>

[FUNCTION IsLeatherArmor]
If <GetArmor> == 1
Return 1
Endif
Return 0

[FUNCTION IsStuddedArmor]
If <GetArmor> == 2
Return 1
Endif
Return 0

[FUNCTION IsRingmailArmor]
If <GetArmor> == 3
Return 1
Endif
Return 0

[FUNCTION IsChainmailArmor]
If <GetArmor> == 4
Return 1
Endif
Return 0

[Function IsBoneArmor]
If <GetArmor> == 5
Return 1
Endif
Return 0

[Function IsPlatemailArmor]
If <GetArmor> == 6
Return 1
Endif
Return 0

[Function IsDragonArmor]
If <GetArmor> == 7
Return 1
Endif
Return 0

[Function IsShield]
If <GetArmor> == 8
Return 1
Endif
Return 0

[function IsHelmet]
IF ((<layer> == layer_helm) && (<IsArmor>))
return 1
endif
return 0

[Function BestWeaponSkill]
Local.Skill = <Fencing>
If <Archery> > <Local.Skill>
Local.Skill = <Archery>
Endif
If <MaceFighting> > <Local.Skill>
Local.Skill = <MaceFighting>
Endif
If <Swordsmanship> > <Local.Skill>
Local.Skill = <Swordsmanship>
Endif
If <Argv[0]>
If <Magery> > <Local.Skill>
Local.Skill = <Magery>
Endif
Endif
Return <Local.Skill>

[Function CombatSys_UsedSkill]
Return <Qval !<Weapon> ? <Wrestling> : <Qval <Weapon.tag0.aos.mage.weapon> ? <BestWeaponSkill 1> : <Qval <Weapon.tag0.aos.UseBestWeaponSkill> ? <BestWeaponSkill> : <<Weapon.skill>>>>>

[FUNCTION CombatSys_UsedSkill_UOR]
Return <Qval <Weapon> ? <<Weapon.Skill>> : <Wrestling>>

[Function ModSkill]
If !<IsEmpty <Argv[0]>>
If <IsNum <Argv[0]>>
If <Serv.Skill.<Argv[0]>>
Local.Amount = <Argv[1]>
If <Eval <TAG0.OVERRIDE.SKILLSUM.AMOUNT> + <Local.Amount>> == 0
TAG.OVERRIDE.SKILLSUM.AMOUNT = 
Else
TAG.OVERRIDE.SKILLSUM.AMOUNT = <Eval <TAG0.OVERRIDE.SKILLSUM.AMOUNT> + <Local.Amount>>
Endif
If <Eval <TAG0.OVERRIDE.SKILLSUM.AMOUNT>+<SkillClass.SkillSum>> == <SkillClass.SkillSum>
TAG.OVERRIDE.SKILLSUM = 
Else
TAG.OVERRIDE.SKILLSUM = <Eval <TAG0.OVERRIDE.SKILLSUM.AMOUNT>+<SkillClass.SkillSum>>
Endif
If <Eval <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT> + <Local.Amount>> == 0
TAG.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT = 
Else
TAG.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT = <Eval <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT> + <Local.Amount>>
Endif
If <Eval <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT>+<SkillClass.<Argv[0]>>> == <SkillClass.<Argv[0]>>
TAG.OVERRIDE.SKILLCAP_<Eval <Argv[0]>> =
Elif <Eval <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT>+<SkillClass.<Argv[0]>>> > 0
TAG.OVERRIDE.SKILLCAP_<Eval <Argv[0]>> = <Eval <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT>+<SkillClass.<Argv[0]>>>
Else
TAG.OVERRIDE.SKILLCAP_<Eval <Argv[0]>> = 0
Endif
If <Local.Amount> > 0
If <Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount> < 0
Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount = <Eval <Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount> + <Local.Amount>>
Local.Amount = 0
Endif
If <Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount> >= 0
Local.Amount += <Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount>
Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount =
If <Eval <<Argv[0]>> + <Local.Amount>> < <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT>
Local.Amount = <Eval <TAG0.OVERRIDE.SKILLCAP_<Eval <Argv[0]>>.AMOUNT> +- <<Argv[0]>>>
Endif
Try <Argv[0]> = <Eval <<Argv[0]>> + <Local.Amount>>
Endif
Else
If <Eval <<Argv[0]>> + <Local.Amount>> < 0
If <<Argv[0]>> > 0
Local.Amount += <<Argv[0]>>
Endif
Tag.Override.Skill.<Eval <Argv[0]>>.NegAmount = <Eval <Tag0.Override.Skill.<Eval <Argv[0]>>.NegAmount> + <Local.Amount>>
Try <Argv[0]> = 0
Else
Try <Argv[0]> = <Eval <<Argv[0]>> + <Local.Amount>>
Endif
Endif
Endif
Endif
Endif



























[Function CombatSys_Max]
RETURN <QVAL <ARGN2> < <ARGN1>? <ARGN1> : <ARGN2>>

[Function CombatSys_Min]
RETURN <QVAL <ARGN2> < <ARGN1>? <ARGN2> : <ARGN1>>

[Function CombatSys_HitSpeed]
DoSwitch <Def0.Combat_HitSpeed>
Return <Argv[0]>
Return <CombatSys_Max <Eval (((800000 / ((<Stam> + 100) * ((<Qval !<Weapon> ? 50 : <Weapon.Speed>> * (100 + <Weapon.tag0.swing.speed.increase>)) / 100))) / 4)) +- 5>, 13>
Return <Eval (150000 / ((<Stam> + 100) * (<Qval <Weapon> ? <Weapon.Speed> : 50>)))>
Enddo

[Function CombatSys_HitChance]
DoSwitch <Def0.Combat_HitChance>
Return <Argv[0]>
Return <Qval Rand(101) <= <CombatSys_HitChance_AOS> ? 0 : -100>
Return <Qval Rand(101) <= <Eval ((<CombatSys_UsedSkill_UOR>*10) + 5000) / (((<Src.CombatSys_UsedSkill_UOR>/10) + 50) *2)> ? 0 : -100>
Enddo

[Function CombatSys_BlockChance]
DoSwitch <Def0.Combat_BlockChance>
Return 0
Return <Qval Rand(101) <= <Src.CombatSys_BlockChance_AOS> ? 1 : 0>
Return <Qval Rand(101) <= <Src.CombatSys_BlockChance_UOR> ? 1 : 0>
Enddo

[Function CombatSys_DamageBonus]
DoSwitch <Def0.Combat_DamageBonus>
Return <Argv[0]>
Return <CombatSys_DamageBonus_AOS>
Return <CombatSys_DamageBonus_UOR>
Enddo

[Function CombatSys_PhysicalResist]
DoSwitch <Def0.Combat_PhysicalResist>
Return 0
Return <CombatSys_PhysicalResist_AOS <Argv[0]>,<Argv[1]>>
Return <CombatSys_PhysicalResist_UOR>
Enddo

[Function CombatSys_ElementalResist]
DoSwitch <Def0.Combat_ElementalResist>
Return 0
Return <CombatSys_ElementalResist_AOS <Argv[0]>,<Argv[1]>>
Return 0
Enddo

[Function CombatSys_SlayerWeapons]
DoSwitch <Def0.Combat_SlayerWeapons>
Return 0
Return <CombatSys_SlayerWeapons_AOS <Argv[0]>>
Return <CombatSys_SlayerWeapons_AOS <Argv[0]>>
Enddo

[Function CombatSys_AOS_Velocity]
If <Def0.Combat_AOS_Velocity>
Serv.Log Chance: <Weapon.dTag0.Velocity>%
Serv.Log Bonus Dam: <Distance <Src.Uid>>
Return <Qval Rand(101) < <Weapon.Tag0.Velocity> ? <Distance <Src.Uid>> : 0>
Endif
Return 0

[Function CombatSys_AOS_WeaponSpells]
If <Def0.Combat_AOS_WeaponSpells>
While <Weapon.Tag0.Spell.<dLocal.Spell>>
If Rand(101) < <WeaponSpellChance <Weapon.Tag0.Spell.<dLocal.Spell>>>
Local.SpellNum=<WeaponSpellNumber <Weapon.Tag0.Spell.<dLocal.Spell>>>
Src.Sound <Serv.Spell.<Local.SpellNum>.Sound>
Src.SpellEffect <Local.SpellNum>,1000,<Uid>
Endif
Local.Spell ++
EndWhile
Endif

[Function WeaponSpellChance]
Return <Argv[0]>

[Function WeaponSpellNumber]
Return <Argv[1]>

[Function CombatSys_AOS_WeaponLeech]
If <Def0.Combat_AOS_WeaponLeech>
Hits = <CombatSys_Min <Eval <Hits> + <Qval Rand(101) < <Weapon.Tag0.Leech.Health>  ?  <MulDiv <Argv[0]>,30,100> : 0>>, <MaxHits>>
Mana = <CombatSys_Min <Eval <Mana> + <Qval Rand(101) < <Weapon.Tag0.Leech.Mana>  ?  <MulDiv <Argv[0]>,40,100> : 0>>, <MaxMana>>
Stam = <CombatSys_Min <Eval <Stam> + <Qval Rand(101) < <Weapon.Tag0.Leech.Stamina>  ?  <Argv[0]> : 0>>, <MaxStam>>
Endif

[Function CombatSys_AOS_WepAttkDefMod]
If <Def0.Combat_AOS_WepAttkDefMod>
If Rand(101) < <Weapon.Tag0.Lower.Attack>
Src.HitLowerAttack
Endif
If Rand(101) < <Weapon.Tag0.Lower.Defense>
Src.HitLowerDefense
Endif
Endif

[Function HitLowerAttack]
If <Restest i_hit_lower_attack>
Findid.i_hit_lower_attack.Timer = <Eval {5 10}>
Else
Serv.Newitem=i_hit_lower_attack
Equip <New.Uid>
Endif

[Itemdef i_hit_lower_attack]
ID=i_memory
TYPE=t_eq_script
Name=Hit Lower Attack

ON=@Equip
Timer=<Eval {5 10}>
Src.Tag.Bonus.HitChanceIncrease = <Eval <Src.Tag0.Bonus.HitChanceIncrease> +- 25>

ON=@UnEquip
Src.Tag.Bonus.HitChanceIncrease = <Eval <Src.Tag0.Bonus.HitChanceIncrease> + 25>

ON=@Timer
Remove
Return 1

[Function HitLowerDefense]
If <Restest i_hit_lower_defense>
Findid.i_hit_lower_defense.Timer = <Eval {5 10}>
Else
Serv.Newitem=i_hit_lower_defense
Equip <New.Uid>
Endif

[Itemdef i_hit_lower_defense]
ID=i_memory
TYPE=t_eq_script
Name=Hit Lower Defense

ON=@Equip
Timer=<Eval {5 10}>
Src.Tag.Bonus.DefenseChanceIncrease = <Eval <Src.Tag0.Bonus.DefenseChanceIncrease> +- 25>

ON=@UnEquip
Src.Tag.Bonus.DefenseChanceIncrease = <Eval <Src.Tag0.Bonus.DefenseChanceIncrease> + 25>

ON=@Timer
Remove
Return 1


[Function CombatSys_AOS_AreaDamage]
If <Def0.Combat_AOS_AreaDamage>
For X 0 4
If Rand(101) < <Weapon.Tag0.HitArea.<Def0.AOS_AreaDamage_<dLocal.X>>>
Src.CombatSys_AOS_AreaDamage_Target <Uid>,<Local.X>
Endif
Endfor
Endif

[Function CombatSys_AOS_AreaDamage_Target]
Ref1=<Argv[0]>
Local.NoHit=<Uid>
Local.X=<Argv[1]>
Forchars 5
If ((<Uid> != <Ref1.Uid>) && (<Uid> != <Local.NoHit>))
If <Ref1.IsHostile <Uid>>
Local.Dam = <Eval {<Ref1.Weapon.GetDam>} / (<Ref1.Weapon.Speed> / 8)>
DoSwitch <Local.X>
Begin
Local.Phys = <CombatSys_Max <Eval <Local.Dam> +- <MulDiv <Local.Dam>,<CombatSys_Min <AC>,70>,100>>,0>
Damage <Local.Phys> 0001 <Ref1.Uid>
Ref1.CombatSys_AOS_PhysicalReflect <Local.Phys>,<Uid>
End
Damage <CombatSys_Max <Eval <Local.Dam> +- <MulDiv <Local.Dam>,<CombatSys_Min <ResFire>,70>,100>>,0> 0001 <Ref1.Uid>
Damage <CombatSys_Max <Eval <Local.Dam> +- <MulDiv <Local.Dam>,<CombatSys_Min <ResCold>,70>,100>>,0> 0001 <Ref1.Uid>
Damage <CombatSys_Max <Eval <Local.Dam> +- <MulDiv <Local.Dam>,<CombatSys_Min <ResPoison>,70>,100>>,0> 0001 <Ref1.Uid>
Damage <CombatSys_Max <Eval <Local.Dam> +- <MulDiv <Local.Dam>,<CombatSys_Min <ResEnergy>,70>,100>>,0> 0001 <Ref1.Uid>
Enddo
Endif
Endif
Endfor

[Function CombatSys_AOS_PhysicalReflect]
If <Def0.Combat_AOS_PhysicalReflect>
Ref1 = <Argv[1]>
Local.Dam = <MulDiv <Argv[0]>,<Ref1.Tag0.Reflect.Physical>,100>
If <Local.Dam> > 0
Damage <CombatSys_Max <Eval <Local.Dam> +- <MulDiv <Local.Dam>,<CombatSys_Min <AC>,70>,100>>,0> 0001 <Ref1.Uid>
Endif
Endif


[Function CombatSys_HitChance_AOS]
Serv.Log Hit Chance (<Name>): <CombatSys_Max <Eval ((<MulDiv  <Eval (<CombatSys_UsedSkill>/10) + 20>, <Eval 100 + <CombatSys_Min <tag0.bonus.hitchanceincrease>,45>>,100> * 100) / <MulDiv  <Eval (<Src.CombatSys_UsedSkill>/10) + 20>, <Eval 100 + <CombatSys_Min <Src.tag0.bonus.defensechanceincrease>,45>>,50>)>, 2>%
Return <CombatSys_Max <Eval ((<MulDiv  <Eval (<CombatSys_UsedSkill>/10) + 20>, <Eval 100 + <CombatSys_Min <tag0.bonus.hitchanceincrease>,45>>,100> * 100) / <MulDiv  <Eval (<Src.CombatSys_UsedSkill>/10) + 20>, <Eval 100 + <CombatSys_Min <Src.tag0.bonus.defensechanceincrease>,45>>,50>)>, 2>

[Function CombatSys_BlockChance_AOS]
Local.DexMod=<Qval <Dex> < 80 ? <Eval 80+-<Dex>> : 0>
Local.ParryingMod=<Qval 999 < <Parrying> ? 5 : 0>
Local.BushidoMod=<CombatSys_Max <Qval 999 < <Bushido> ? 5 : 0>, <Local.ParryingMod>>
If <Shield>
Serv.Log Block Shield (<Name>): <Eval <MulDiv <CombatSys_Max <Eval (((<Parrying> +- <Bushido>) / 4) / 10)>,0>,<Eval 100+-<Local.DexMod>>,100> + <Local.BushidoMod>>%
Return <Eval <MulDiv <CombatSys_Max <Eval (((<Parrying> +- <Bushido>) / 4) / 10)>,0>,<Eval 100+-<Local.DexMod>>,100> + <Local.BushidoMod>>
Elif <Weapon>
Serv.Log Block Wep (<Name>): <MulDiv <CombatSys_Max <Eval ((<Parrying> * <Bushido>) / <Qval <Weapon.Twohands> ? 41140 : 48000>) + <Local.BushidoMod>>, <Eval (<Parrying> / 80) + <Local.ParryingMod>>>,<Eval 100+-<Local.DexMod>>,100>%
Return <MulDiv <CombatSys_Max <Eval ((<Parrying> * <Bushido>) / <Qval <Weapon.Twohands> ? 41140 : 48000>) + <Local.BushidoMod>>, <Eval (<Parrying> / 80) + <Local.ParryingMod>>>,<Eval 100+-<Local.DexMod>>,100>
Endif
Return -1

[Function CombatSys_BlockChance_UOR]
If <Shield>
Serv.Log Block UO:R (<Name>): <Eval <Parrying> / 20>%
Return <Eval <Parrying> / 20>
Endif
Return -1




[Function CombatSys_DamageBonus_AOS]
Local.Dam = <Qval <Weapon> ? <eval {<Weapon.GetDam>}> : <Qval <Def0.Combat_PC_Wrestling_Ignore_Body> ? <Qval <IsPlayer> ? <Eval {1 4}> : <Eval {<serv.chardef.<body>.dam>}>> : <Eval {<serv.chardef.<body>.dam>}>>>
Local.Tactics = <Eval (<Tactics>/16) + <Qval 999 < <Tactics> ? 6 : 0>>
Local.Anatomy = <Eval (<Anatomy>/20) + 5>
Local.Lumberjacking = <Qval <Weapon.Type>==t_weapon_axe ? <Eval (<Lumberjacking>/50) + <Qval 999 < <Lumberjacking> ? 10 : 0>> : 0>
Local.Str = <Eval ((<Str>*3) / 10) + <Qval 99 < <Str> ? 5 : 0>>
Local.Bonus = <CombatSys_Min <Eval <Local.Tactics> + <Local.Anatomy> + <Local.Lumberjacking> + <Local.Str> + <Tag0.Damage.Increase>>, 100>
Return <Eval <Local.Dam> + <MulDiv <Local.Dam>,<Local.Bonus>,100>>

[Function CombatSys_DamageBonus_UOR]
Local.Dam = <Qval <Weapon> ? <eval {<Weapon.GetDam>}> : <Qval <Def0.Combat_PC_Wrestling_Ignore_Body> ? <Qval <IsPlayer> ? <Eval {1 4}> : <Eval {<serv.chardef.<body>.dam>}>> : <Eval {<serv.chardef.<body>.dam>}>>>
Local.Tactics = <Eval (<Tactics>/10) + 50>
Local.Anatomy = <Eval (<Anatomy>/50)>
Local.Str = <Eval <Str>/5>
If <Def0.Combat_UOR_LumberjackBonus>
Local.Lumberjacking = <Qval <Weapon.Type>==t_weapon_axe ? <Eval (<Lumberjacking>/50) + <Qval 999 < <Lumberjacking> ? 10 : 0>> : 0>
Endif
Local.Bonus = <Eval <Local.Tactics> + <Local.Anatomy> + <Local.Lumberjacking> + <Local.Str> + <Tag0.Damage.Increase>>
Serv.Log Damage % = <dLocal.Bonus>
Return <MulDiv <Local.Dam>,<Local.Bonus>,100>

[Function CombatSys_PhysicalResist_AOS]
If <Argv[1]> > 1
Return 0
Endif
Local.Dam = <Argv[0]>
If <Weapon>
If ((<Def0.Combat_ElementalResist>==1) && (<Argv[1]> != 1))
Local.Physical = <MulDiv <Local.Dam>,<CombatSys_Max <Eval 100 +- (<DamFire> + <DamCold> + <DamPoison> + <DamEnergy>)>, 0>,100>
Serv.Log Phys: <dLocal.Physical>
Serv.Log Return Calc: <Local.Dam> +- <MulDiv <Local.Physical>,<CombatSys_Min <Src.AC>,70>,100>
Serv.Log Return Phys: <MulDiv <Local.Physical>,<CombatSys_Min <Src.AC>,70>,100>
Return <MulDiv <Local.Physical>,<CombatSys_Min <Src.AC>,70>,100>
Endif
Endif
Return <MulDiv <Local.Dam>,<CombatSys_Min <Src.AC>,70>,100>

[Function CombatSys_PhysicalResist_UOR]
If (<CAN>&(mt_equip)) || (<Def0.Combat_PC_Wrestling_Ignore_Body> && <IsPlayer>)
Local.Armor = <Src.Get_Armor_Location <f_Get_Hit_Location>>
Serv.Log AC: <dLocal.Armor>
Else
Local.Armor = <Eval <Src.Armor> + <Src.Modar>>
Endif
Return <Eval Rand(<Eval <Local.Armor>/2>,<Local.Armor>)>

[Function CombatSys_ElementalResist_AOS]
Local.Dam = <Argv[0]>
If <Argv[1]>
serv.log argv1 = <Argv[1]>
DoSwitch <Argv[1]>
Return 0
Return 0
Return <Eval <MulDiv <Local.Dam>,<CombatSys_Min <Src.ResFire>,70>,100>>
Return <Eval <MulDiv <Local.Dam>,<CombatSys_Min <Src.ResCold>,70>,100>>
Return <Eval <MulDiv <Local.Dam>,<CombatSys_Min <Src.ResPoison>,70>,100>>
Return <Eval <MulDiv <Local.Dam>,<CombatSys_Min <Src.ResEnergy>,70>,100>>
Enddo
Endif
IF (<Def0.Combat_PhysicalResist> == 0) //If phsyical resistance is off the armor will be calculated by Sphere, this prevents that armor affecting elemental damage
	Local.Fire = <MulDiv <Local.Dam>,<DamFire>,100>
	Local.Cold = <MulDiv <Local.Dam>,<DamCold>,100>
	Local.Poison = <MulDiv <Local.Dam>,<DamPoison>,100>
	Local.Energy = <MulDiv <Local.Dam>,<DamEnergy>,100>
	Local.Return = <Eval (<Local.Fire> + <Local.Cold> + <Local.Poison> + <Local.Energy>)>
	Local.Fire -= <Eval <MulDiv <Local.Fire>,<CombatSys_Min <Src.ResFire>,70>,100>>
	Local.Cold -= <Eval <MulDiv <Local.Cold>,<CombatSys_Min <Src.ResCold>,70>,100>>
	Local.Poison -= <Eval <MulDiv <Local.Poison>,<CombatSys_Min <Src.ResPoison>,70>,100>>
	Local.Energy -= <Eval <MulDiv <Local.Energy>,<CombatSys_Min <Src.ResEnergy>,70>,100>>
	Src.Damage <Eval (<Local.Fire> + <Local.Cold> + <Local.Poison> + <Local.Energy>)> 0001 <Uid>
	Return <Local.Return> //Subtract out all the elemental damage to leave only phsyical	
ELSE
	Local.Fire = <Eval <MulDiv <MulDiv <Local.Dam>,<DamFire>,100>,<CombatSys_Min <Src.ResFire>,70>,100>>
	Local.Cold = <Eval <MulDiv <MulDiv <Local.Dam>,<DamCold>,100>,<CombatSys_Min <Src.ResCold>,70>,100>>
	Local.Poison = <Eval <MulDiv <MulDiv <Local.Dam>,<DamPoison>,100>,<CombatSys_Min <Src.ResPoison>,70>,100>>
	Local.Energy = <Eval <MulDiv <MulDiv <Local.Dam>,<DamEnergy>,100>,<CombatSys_Min <Src.ResEnergy>,70>,100>>
	Return <Eval (<Local.Fire> + <Local.Cold> + <Local.Poison> + <Local.Energy>)>
ENDIF

[Function CombatSys_SlayerWeapons_AOS]
If <Src.IsSlayer <Weapon.Tag0.Slayer>>
Return <Argv[0]>
Endif

[Function CombatSys_Block]
SYSMESSAGE @34,,1 <SRC.NAME> parries the blow.
SRC.SYSMESSAGE @88,,1 You parry the blow.
Src.Trigger @Block,<def.TAT_AS_ARGO>,<Uid>
If <Src.Shield>
Ref1=<Src.Shield>
Ref1.Trigger @Block,<def.TAT_AS_ARGO>,<Uid>
Else
Src.Weapon.Trigger @Block,<def.TAT_AS_ARGO>,<Uid>
Endif
Src.Sound 329
Serv.Log +++Blocked! (<Src.Name>)+++

[Function CombatSys_Shield]
If <Src.Findlayer.2>
Serv.log OOOOOOOOOOOOOOOOO  <Src.Findlayer.2.Trigger @Shield,<def.TAT_AS_ARGO>,<Argv[0]>>
Return <Src.Findlayer.2.Trigger @Shield,<def.TAT_AS_ARGO>,<Argv[0]>>
Endif



[FUNCTION f_Get_Hit_Location]
Local.Height=<CombatSys_Min <Eval <Height>/5>,6>
DoSwitch <Local.Height>
Return <f_Hit_Loc_2 40,70,80,95,98>
Return <f_Hit_Loc_2 30,60,70,85,93>
Return <f_Hit_Loc_2 30,50,70,85,90>
Return <f_Hit_Loc_2 14,58,72,79,86>
Return <f_Hit_Loc_2 15,50,60,70,85>
Return <f_Hit_Loc_2 15,60,70,80,85>
Return <f_Hit_Loc_2 18,36,54,72,90>
Enddo

[Function f_Hit_Loc_2]
local.rand=<r1,100>
If <local.rand> <= <Argv[0]>
 RETURN 1
ELIF <local.rand> <= <Argv[1]>
 RETURN 2
ELIF <local.rand> <= <Argv[2]>
 RETURN 3
ELIF <local.rand> <= <Argv[3]>
 RETURN 4
ELIF <local.rand> <= <Argv[4]>
 RETURN 5
ELSE
 RETURN 6
ENDIF


[Function Get_Armor_Location]
DoSwitch <Eval <Argv[0]>+-1>
Return <Get_Armor_Loc_1>
Return <Get_Armor_Loc_2>
Return <Get_Armor_Loc_3>
Return <Get_Armor_Loc_4>
Return <Get_Armor_Loc_5>
Return <Get_Armor_Loc_6>
Enddo

[Function Get_Armor_Loc_1]
Local.Armor=0
Local.ArmorTotal=0
Local.ArmorTotal += (<Findlayer.22.Armor.High> + (<findlayer.22.morey>/66))
Local.Armor = <eval <Findlayer.22.Armor.High> + (<findlayer.22.morey>/66)>
Local.ArmorTotal += (<Findlayer.4.Armor.High> + (<findlayer.4.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.4.Armor.High> + (<findlayer.4.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.12.Armor.High> + (<findlayer.12.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.12.Armor.High> + (<findlayer.12.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.23.Armor.High> + (<findlayer.23.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.23.Armor.High> + (<findlayer.23.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.24.Armor.High> + (<findlayer.24.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.24.Armor.High> + (<findlayer.24.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.3.Armor.High> + (<findlayer.3.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.3.Armor.High> + (<findlayer.3.morey>/66)>,<Local.Armor>>
Return <Qval <Def0.Combat_Armor_Stacking> ? <dLocal.ArmorTotal> : <dLocal.Armor>>

[Function Get_Armor_Loc_2]
Local.Armor=0
Local.ArmorTotal=0
Local.ArmorTotal += (<Findlayer.22.Armor.High> + (<findlayer.22.morey>/66))
Local.Armor = <eval <Findlayer.22.Armor.High> + (<findlayer.22.morey>/66)>
Local.ArmorTotal += (<Findlayer.5.Armor.High> + (<findlayer.5.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.5.Armor.High> + (<findlayer.5.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.13.Armor.High> + (<findlayer.13.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.13.Armor.High> + (<findlayer.13.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.17.Armor.High> + (<findlayer.17.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.17.Armor.High> + (<findlayer.17.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.20.Armor.High> + (<findlayer.20.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.20.Armor.High> + (<findlayer.20.morey>/66)>,<Local.Armor>>
Return <Qval <Def0.Combat_Armor_Stacking> ? <dLocal.ArmorTotal> : <dLocal.Armor>>

[Function Get_Armor_Loc_3]
Local.Armor=0
Local.ArmorTotal=0
Local.ArmorTotal += (<Findlayer.22.Armor.High> + (<findlayer.22.morey>/66))
Local.Armor = <eval <Findlayer.22.Armor.High> + (<findlayer.22.morey>/66)>
Local.ArmorTotal += (<Findlayer.20.Armor.High> + (<findlayer.20.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.20.Armor.High> + (<findlayer.20.morey>/66)>,<Local.Armor>>
Local.ArmorTotal += (<Findlayer.19.Armor.High> + (<findlayer.19.morey>/66)
Local.Armor = <CombatSys_Max <eval <Findlayer.19.Armor.High> + (<findlayer.19.morey>/66)>,<Local.Armor>>
Return <Qval <Def0.Combat_Armor_Stacking> ? <dLocal.ArmorTotal> : <dLocal.Armor>>

[Function Get_Armor_Loc_4]
Return <eval <Findlayer.7.Armor.High> + (<findlayer.7.morey>/66)>

[Function Get_Armor_Loc_5]
Return <eval <Findlayer.10.Armor.High> + (<findlayer.10.morey>/66)>

[Function Get_Armor_Loc_6]
Return <eval <Findlayer.6.Armor.High> + (<findlayer.6.morey>/66)>

 [FUNCTION RESPHYS]
 LOCAL.CALC = <ARGN>
 IF <ISEMPTY <ARGN>>
 RETURN <EVAL <TAG0.RESPHYS>>
 ELSE
 TRY TAG0.RESPHYS = <EVAL <LOCAL.CALC>>
 ENDIF


[EOF]


